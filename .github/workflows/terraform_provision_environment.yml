---
name: Terraform Provision Environment

# The required environment variables are:
# - DATABRICKS_HOST: URL for connecting to the Databricks instance
# - DATABRICKS_TOKEN: API token for authenticating with the Databricks instance
# - GOOGLE_BACKEND_CREDENTIALS: JSON credentials for authenticating with Google backend services

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Specifies the environment for provisioning infrastructure. Accepted values are 'prod', 'dev' or 'stg'."

      terraform_version:
        required: true
        type: string
        description: "Specifies the version of Terraform to be used for provisioning infrastructure."

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/environments/${{ inputs.environment }}
    env:
      GOOGLE_BACKEND_CREDENTIALS: ${{ secrets.GOOGLE_BACKEND_CREDENTIALS }}
    strategy:
      max-parallel: 4
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6.1.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  provision:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      GOOGLE_BACKEND_CREDENTIALS: ${{ secrets.GOOGLE_BACKEND_CREDENTIALS }}
    strategy:
      max-parallel: 4
    defaults:
      run:
        working-directory: terraform/environments/${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: ${{ inputs.terraform_version }}
      - name: Set up Databricks CLI profile for Terraform provider
        run: |
          echo "[DEFAULT]" >> ~/.databrickscfg
          echo "host = ${{ secrets.DATABRICKS_HOST }}" >> ~/.databrickscfg
          echo "token = ${{ secrets.DATABRICKS_TOKEN }}" >> ~/.databrickscfg
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false --auto-approve
        continue-on-error: true
      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
